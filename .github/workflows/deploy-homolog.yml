name: Deploy Homologation

on:
  push:
    branches:
      - staging
       


permissions:
  id-token: write
  contents: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Login no Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build da imagem Docker
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/gregorian-api:alfa -f deploy/Staging/Build/Dockerfile .

      - name: Push da imagem para o Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/gregorian-api:alfa

  terraform:
    runs-on: ubuntu-latest
    needs: build-and-push

    outputs:
      ec2_dns: ${{ steps.terraform-output.outputs.ec2_dns }}

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            role-to-assume: ${{secrets.AWS_ROLE_ARN}}
            role-session-name: GitHub_Actions_Deploy_API_Production
            aws-region: ${{secrets.AWS_REGION}}

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Inicializar Terraform
        run: |
          cd deploy/Staging/Terraform
          terraform init
       

      - name: Aplicar Terraform (Criar EC2)
        run: |
          cd deploy/Staging/Terraform
          terraform apply -auto-approve

      - name: Obter saída do Terraform
        id: terraform-output
        run: |
          cd deploy/Staging/Terraform
          echo "ec2_dns=$(terraform output -raw ec2_dns)" >> $GITHUB_ENV

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: terraform

  #   steps:
  #     - name: Deploy na EC2 via SSH
  #       uses: appleboy/ssh-action@v0.1.10
  #       with:
  #         host: ${{ env.ec2_dns }}
  #         username: ${{ secrets.EC2_USER }}
  #         key: ${{ secrets.EC2_SSH_KEY }}
  #         script: |
  #           docker pull ${{ secrets.DOCKERHUB_USERNAME }}/gregorian-api:latest
  #           docker stop gregorian-api || true
  #           docker rm gregorian-api || true
  #           docker run -d --name gregorian-api -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/gregorian-api:alfa
